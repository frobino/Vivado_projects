Instructions for Vivado 2014.2

Extract xapp to a new dir <xapp>
Create a new directory, in <xapp> called 'work'
Copy the directory <xapp>/src/bootgen to <xapp>/work/bootgen
Open Vivado 2014.1
In the Tcl command window, 'cd <xapp>/work'
Create, build, and export the hdwr design to SDK by running the included script using tcl:
  For the ZC706 design, run the tcl command 'source ../src/scripts/create_proj_706.tcl'
  For the ZC702 design, run the tcl command 'source ../src/scripts/create_proj_702.tcl'
  For the zedBoard design, run the tcl command 'source ../src/scripts/create_proj_zedBoard.tcl'

Review the create_proj_706.tcl file. This script does the following:
  - Create a new project
  - Set the properties of the project such as part used and board used
  - Set Vivado to use the included I.P. repository in <xapp>/src/pcores. This repository includes
    the custom IP that can create interrupts towards the PS using either a register or chipscope VIO
  - Create the IPI design using the tcl script <xapp>/src/scripts/create_bd_706.tcl. This script
    was originally created after creating the IPI design manually, and then issuing the command
    'write_bd_tcl ../src/scripts/create_bd_706.tcl'.
  - validate and save the IPI design
  - Create the top level HDL wrapper and add it to the project. (Same as navigating to 'Project Manager',
    right clicking on design_1.bd, and selecting 'Create HDL Wrapper')
  - Create bitstream. This command will recognize that the design hasn't been implemented yet and will
    run 'generate files' on design_1.bd, synthesis, implementation, and bitstream generation.
  - Open the implemented design (necessary to export bitfile to SDK)
  - Export the design and bitstream to SDK and launch SDK

Once SDK opens, a hardware platform project will have been created automatically.
Setup SDK to use the included <xapp>/src/sdk_repo. This repository includes a modified standalone BSP.
The only modifications to the BSP are the files boot.S and asm_vectors.S
  select Xilinx_Tools->Repositories
  Beside the Local Repositories, select New
  Browse to and select <xapp>/src/sdk_repo, select OK
  Select OK
Create the FSBL project
  Select File->New->Application_Project
  Enter the project name 'fsbl' and select Next
  Select the template 'Zynq FSBL' then select Finish
  Restarting CPU1 relies on the modified vector table in the FSBL BSP. Verify the FSBL BSP is using standalone from the
  local repository:
  - After FSBL builds, right click on the fsbl_bsp project and select 'Board Support Package Settings'
  - In the Overview window, verify the OS Version is 4.91. Also the description will start with 'Modified Standalone based on...'
  - select cancel
Create the Application that will run on CPU0
  Select File->New->Application_Project
  Enter the project name 'app_cpu0' and select Next
  Select the template 'Empty Application' then select Finish. This step will create a blank application and
    will create the Standalone BSP that is used by the application.
  Import the C and linkerscript file for app_cpu0 by navigating to SDK Project Explorer and right clicking 
  on app_cpu0/src and select 'Import'
  Select General->File_System then select Next
  In the 'From directory', browse to and select <xapp>/src/apps/app_cpu0
  In the right window, select both app_cpu0.c and lscript.ld then select Finish. Answer Yes to overwrite lscript.ld


//Note to me:
//  Verify cause problems showed up
//  for zedBoard. Instead create 
//  blank app then modify bsp    

Create the BSP for CPU1
  Select File->New->Board_Support_Package
  Enter the project name 'app_cpu1_bsp', change CPU to ps7_cortexa9_1. 
  Select Finish
  In the 'Board Support Package Settings' Select Overview->drivers->ps7_cortexa9_1 and change the extra_compiler_flags value to contain '-g -DUSE_AMP=1'
  Select OK

Create the Application that will run on CPU1
  Select File->New->Application_Project
  Enter the project name 'app_cpu1'
  Change Processor to ps7_cortexa9_1
  Change 'Board Support Package' to 'Use existing' 'app_cpu1_bsp' and select Next
  Select the template 'Empty Application' then select Finish.
  Import the C and linkerscript file for app_cpu1 by navigating to SDK Project Explorer and right clicking 
  on app_cpu1/src and select 'Import'
  Select General->File_System then select Next
  In the 'From directory', browse to and select <xapp>/src/apps/app_cpu1
  In the right window, select both app_cpu1.c and lscript.ld then select Finish. Answer Yes to overwrite lscript.ld
Create BOOT.BIN and copy it to the SD card
  From SDK, open a command window by selecting Xilinx_Tools->Launch_Shell
  In the shell, cd to <xapp>/work/bootgen
  Run bootgen by executing the batch file 'createBoot.bat'
  Copy the newly created BOOT.BIN file to the SD card
Working with the design
  Power up the board and the uart should show the following lines that repeat forever:
    CPU0: Hello World CPU 0
    CPU1: Hello World CPU 1  
  Open Hardware manager and create interrupts from the VIO towards cpu1
    - in Vivado, select 'open hardware manager'
    - Once hardware manager opens, connect to the board using 'open a new hardware target'    
      - select next
      - leave the default at 'local server' and select next
      - Hardware manager will start a server and connect to it
      - Notice that the VIO and ILA tabs are blank. Add the ILA and VIO signals to the tabs:
        - select all signals on hw_ila_1 within the 'Debug Probes' window.
        - right click and select 'add probes to basic trigger'
        - focus will change to the ILA tab
        - In the ILA tab, click on the Compare Value for irq_gen_0_IRQ and change Operator: ==, Radix: [B], and Value: R (for rising)
        - select ok  
        - Also change the 'Trigger position in window' from 0 to 100 so that 100 clock captures will be displayed before the trigger occurs
      - In the Debug Probes window, right click on the hw_vio_1 signal and select 'Add Probes to VIO Window'
      - Focus will change to the VIO tab
      - right click on the signal, in the VIO tab, and change to 'Active High Button'
      - Start the ILA trigger by right clicking on the ILA in the Hardware window and select 'run trigger'. The status should change to 'Waiting For Trigger'
      - Change focus to the VIO tab and make sure the output to the terminal is visable
      - create an interrupt by clickin on the button in the VIO tab beside the probe_out0 signal 
      - as the button is pressed, the ILA will receive a trigger and display the captured waveform. Also, cpu1 will receive the interrupt, 
        print 'CPU1: Hello World With Interrupt CPU 1' to the terminal and then pause for 2 seconds
        
    
  